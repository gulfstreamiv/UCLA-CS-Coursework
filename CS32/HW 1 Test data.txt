Homework 1 Test Data
As the syllabus said, not every problem of every homework will necessarily be graded. For this homework, we primarily graded problems 3 and 5, although you lost 20 points if your StudentSet in Problem 4 was not implemented using a Set as required, delegating as much work as possible to that Set. A number of people lost additional points for not meeting the requirements listed under "Turn it in" in the spec. 

When the following program is compiled along with Set.cpp, it can be run with input 1 through 50 to test your solution to Problem 3. If the #define of TESTNEW is uncommented and the program is compiled along with newSet.cpp, it can be run with input 1 through 62 to test your solution to Problem 5. (This program uses some features of C++ we're not covering, but that's irrelevant to you.) Each passed test was worth 5/7 point. 

// tester.cpp
// To test HW 1 Problem 5, uncomment the following line:
// #define TESTNEW

#ifdef TESTNEW
#include "newSet.h"
#else
#include "Set.h"
#endif

#include <iostream>
#include <cstdlib>
#include <cassert>
#include <string>

using namespace std;

bool emptytype(bool (Set::*)() const) { return true; }
bool emptytype(bool (Set::*)()) { return false; }
bool emptytype(...) { return false; }
bool sizetype(int (Set::*)() const) { return true; }
bool sizetype(int (Set::*)()) { return false; }
bool sizetype(...) { return false; }
bool containstype(bool (Set::*)(const ItemType&) const) { return true; }
bool containstype(bool (Set::*)(const ItemType&)) { return false; }
bool containstype(...) { return false; }
bool gettype(bool (Set::*)(int, ItemType&) const) { return true; }
bool gettype(bool (Set::*)(int, ItemType&)) { return false; }
bool gettype(...) { return false; }

ItemType DUMMY = 123;
ItemType DEFAULT = 0;
ItemType ARRAY[6] = { 10, 20, 30, 40, 50, 60 };

bool isPermutation(ItemType a[], const ItemType b[], int n)
{
	for (size_t k = 0; k < n; k++)
	{
		size_t j;
		for (j = k; j < n; j++)
		{
			if (b[k] == a[j])
			{
				ItemType t = a[k];
				a[k] = a[j];
				a[j] = t;
				break;
			}
		}
		if (j == n)
			return false;
	}
	return true;
}

int SPEC_MAX = 200;

void testone(int n)
{
	Set s;
	switch (n)
	{
			         default: {
	    cout << "Bad argument" << endl;
			} break; case  1: {
	    assert(emptytype(&Set::empty));
			} break; case  2: {
	    assert(sizetype(&Set::size));
			} break; case  3: {
	    assert(containstype(&Set::contains));
			} break; case  4: {
	    assert(gettype(&Set::get));
			} break; case  5: {
	    assert(s.empty());
			} break; case  6: {
	    assert(s.size() == 0);
			} break; case  7: {
	    assert(!s.erase(DEFAULT)  &&  s.size() == 0);
	  		} break; case  8: {
	    assert(!s.contains(DEFAULT));
	  		} break; case  9: {
	    ItemType x = DUMMY;
	    assert(!s.get(0, x));
	  		} break; case 10: {
	    ItemType x = DUMMY;
	    s.get(0, x);
	    assert(x == DUMMY);
	  		} break; case 11: {
	    assert(s.insert(DUMMY));
	  		} break; case 12: {
	    s.insert(DUMMY);
	    assert(!s.empty());
	  		} break; case 13: {
	    s.insert(DUMMY);
	    assert(s.size() == 1);
	  		} break; case 14: {
	    s.insert(DUMMY);
	    assert(s.contains(DUMMY));
	  		} break; case 15: {
	    s.insert(DUMMY);
	    ItemType x = DEFAULT;
	    assert(s.get(0, x));
	  		} break; case 16: {
	    s.insert(DUMMY);
	    ItemType x = DEFAULT;
	    s.get(0, x);
	    assert(x == DUMMY);
	  		} break; case 17: {
	    assert(s.insert(DUMMY)  &&  !s.insert(DUMMY));
			} break; case 18: {
	    s.insert(DUMMY);
	    s.insert(DUMMY);
	    assert(s.size() == 1);
	    		} break; case 19: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    assert(!s.empty()   &&  s.size() == 2);
	    		} break; case 20: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    ItemType x = DUMMY;
	    s.get(0,x);
	    assert(x == ARRAY[0]  ||  x == ARRAY[1]);
	    		} break; case 21: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    ItemType x = DUMMY;
	    s.get(0,x);
	    ItemType y = DUMMY;
	    s.get(0,y);
	    assert(x == y);
	    		} break; case 22: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    ItemType x = DUMMY;
	    s.get(0,x);
	    ItemType y = DUMMY;
	    s.get(1,y);
	    assert((x == ARRAY[0]  &&  y == ARRAY[1])  ||
	           (x == ARRAY[1]  &&  y == ARRAY[0]));
	    		} break; case 23: {
	    s.insert(ARRAY[3]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[4]);
	    s.insert(ARRAY[2]);
	    assert(s.size() == 5);
	    		} break; case 24: {
	    s.insert(ARRAY[3]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[4]);
	    s.insert(ARRAY[2]);
	    ItemType a[5] = { DUMMY, DUMMY, DUMMY, DUMMY, DUMMY };
	    for (size_t k = 0; k < 5; k++)
		s.get(k, a[k]);
	    assert(isPermutation(a, ARRAY, 5));
	    		} break; case 25: {
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[0]);
	    assert(s.size() == 2);
	    		} break; case 26: {
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[0]);
	    ItemType a[2] = { DUMMY, DUMMY };
	    for (size_t k = 0; k < 2; k++)
		s.get(k, a[k]);
	    assert(isPermutation(a, ARRAY, 2));
	    		} break; case 27: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.insert(ARRAY[3]);
	    s.insert(ARRAY[4]);
	    assert(s.erase(ARRAY[3]));
	    		} break; case 28: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.insert(ARRAY[3]);
	    s.insert(ARRAY[4]);
	    s.erase(ARRAY[3]);
	    assert(s.size() == 4);
	    		} break; case 29: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.insert(ARRAY[3]);
	    s.insert(ARRAY[4]);
	    assert(s.erase(ARRAY[0])  &&  s.size() == 4);
	    		} break; case 30: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.insert(ARRAY[3]);
	    s.insert(ARRAY[4]);
	    assert(s.erase(ARRAY[4])  &&  s.size() == 4);
	    		} break; case 31: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[2]);
	    s.insert(ARRAY[1]);
	    assert(s.erase(ARRAY[1])  &&  s.size() == 2);
	    		} break; case 32: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.insert(ARRAY[3]);
	    s.insert(ARRAY[1]);
	    s.erase(ARRAY[3]);
	    ItemType a[3] = { DUMMY, DUMMY, DUMMY };
	    for (size_t k = 0; k < 3; k++)
		s.get(k, a[k]);
	    assert(s.size() == 3  &&  isPermutation(a, ARRAY, 3));
	    		} break; case 33: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[3]);
	    s.insert(ARRAY[2]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[3]);
	    s.erase(ARRAY[3]);
	    ItemType a[3] = { DUMMY, DUMMY, DUMMY };
	    for (size_t k = 0; k < 3; k++)
		s.get(k, a[k]);
	    assert(s.size() == 3  &&  isPermutation(a, ARRAY, 3));
	    		} break; case 34: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.insert(ARRAY[3]);
	    assert(!s.erase(ARRAY[4]));
	    		} break; case 35: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.insert(ARRAY[3]);
	    s.erase(ARRAY[4]);
	    assert(s.size() == 4);
	    		} break; case 36: {
	    s.insert(DUMMY);
	    s.erase(DUMMY);
	    assert(s.size() == 0);
	    		} break; case 37: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    ItemType x;
	    assert(!s.get(-1, x));
	    		} break; case 38: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    ItemType x = DUMMY;
	    s.get(-1, x);
	    assert(x == DUMMY);
	    		} break; case 39: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    ItemType x;
	    assert(! s.get(3, x));
	    		} break; case 40: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    ItemType x = DUMMY;
	    s.get(3, x);
	    assert(x == DUMMY);
	    		} break; case 41: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.erase(ARRAY[1]);
	    assert(!s.contains(DEFAULT));
	    		} break; case 42: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.erase(ARRAY[1]);
	    assert(s.contains(ARRAY[2]));
	    		} break; case 43: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.erase(ARRAY[2]);
	    assert(s.size() == 2  &&  !s.contains(ARRAY[2]));
	    		} break; case 44: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.erase(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    s.insert(ARRAY[3]);
	    assert(s.size() == 3  &&  s.contains(ARRAY[2])  &&
				s.contains(ARRAY[3]));
	    		} break; case 45: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    {
		Set s2;
	    	s2.insert(ARRAY[3]);
	    	s2.insert(ARRAY[4]);
		s.swap(s2);
		assert(s.size() == 2  &&  s2.size() == 3);
	    }
	    		} break; case 46: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    {
		Set s2;
	    	s2.insert(ARRAY[3]);
	    	s2.insert(ARRAY[4]);
		s.swap(s2);
		ItemType x;
		assert(s.contains(ARRAY[3])  &&  s.contains(ARRAY[4]));
		for (size_t k = 0; k < 3; k++)
			assert(!s.contains(ARRAY[k]));
	    }
	    		} break; case 47: {
	    for (size_t k = 0; k < SPEC_MAX; k++)
		assert(s.insert(k));
	    		} break; case 48: {
	    for (size_t k = 0; k < SPEC_MAX; k++)
		assert(s.insert(k));
	    assert(!s.insert(SPEC_MAX));
	    		} break; case 49: {
	    assert(s.insert(DUMMY));
	    for (size_t k = 0; k < 10*SPEC_MAX; k++)
		assert(!s.insert(DUMMY));
	    		} break; case 50: {
	    for (size_t k = 0; k < SPEC_MAX; k++)
		assert(s.insert(k));
	    assert(!s.insert(SPEC_MAX));
	    s.erase(0);
	    assert(s.insert(SPEC_MAX+1));
	    assert(!s.insert(SPEC_MAX+2));
#if TESTNEW
	    		} break; case 51: {
	      // This test checked that swap doesn't take a length of time
	      // proportional to the number of items in the Sets
	    		} break; case 52: {
	    const size_t CAPACITY = 2;
	    Set s2(CAPACITY);
	    for (size_t k = 0; k < CAPACITY; k++)
		assert(s2.insert(k));
	    assert(! s2.insert(CAPACITY));
	    		} break; case 53: {
	    const size_t CAPACITY = SPEC_MAX*2;
	    Set s2(CAPACITY);
	    for (size_t k = 0; k < CAPACITY; k++)
		assert(s2.insert(k));
	    assert(! s2.insert(CAPACITY));
	    		} break; case 54: {
	      // This test checked that the destructor deletes the array of
	      // items.
	    		} break; case 55: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    {
		Set s2(s);
	    	s2.insert(ARRAY[3]);
		assert(s2.size() == s.size()+1);
	    }
	    		} break; case 56: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    {
		Set s2(s);
	    	s2.insert(ARRAY[3]);
	        ItemType a[4] = { DUMMY, DUMMY, DUMMY, DUMMY };
	        for (size_t k = 0; k < 4; k++)
		    s2.get(k, a[k]);
		assert(s2.size() == 4  &&  isPermutation(a, ARRAY, 4));
	    }
	    		} break; case 57: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    s.insert(ARRAY[2]);
	    {
		Set s2(s);
	    	s2.insert(ARRAY[3]);
	        ItemType a[3] = { DUMMY, DUMMY, DUMMY };
	        for (size_t k = 0; k < 3; k++)
		    s.get(k, a[k]);
		assert(s.size() == 3  &&  isPermutation(a, ARRAY, 3));
	    }
	    		} break; case 58: {
	    {
		Set s2(2);
	    	s2.insert(ARRAY[0]);
	    	s2.insert(ARRAY[1]);
		Set s3(s2);
		assert(! s3.insert(ARRAY[2]));
	    }
	    		} break; case 59: {
	      // This test checked that the assignment operator doesn't
	      // just copy a pointer.
	    		} break; case 60: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    {
		Set s2;
	    	s2.insert(ARRAY[2]);
	    	s2.insert(ARRAY[3]);
	    	s2.insert(ARRAY[4]);
		s2 = s;
	    	s2.insert(ARRAY[5]);
		assert(s2.size() == s.size()+1);
	    }
	    		} break; case 61: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    {
		Set s2;
	    	s2.insert(ARRAY[3]);
	    	s2.insert(ARRAY[4]);
	    	s2.insert(ARRAY[5]);
		s2 = s;
	    	s2.insert(ARRAY[2]);
	        ItemType a[3] = { DUMMY, DUMMY, DUMMY };
	        for (size_t k = 0; k < 3; k++)
		    s2.get(k, a[k]);
		assert(s2.size() == 3  &&  isPermutation(a, ARRAY, 3));
	    }
	    		} break; case 62: {
	    s.insert(ARRAY[0]);
	    s.insert(ARRAY[1]);
	    {
		Set s2;
	    	s2.insert(ARRAY[3]);
	    	s2.insert(ARRAY[4]);
	    	s2.insert(ARRAY[5]);
		s2 = s;
	    	s2.insert(ARRAY[2]);
	        ItemType a[2] = { DUMMY, DUMMY };
	        for (size_t k = 0; k < 2; k++)
		    s.get(k, a[k]);
		assert(s.size() == 2  &&  isPermutation(a, ARRAY, 2));
	    }
#endif
			}
	}
}

int main()
{
	cout << "Enter test number: ";
	int n;
	cin >> n;
	testone(n);
	cout << "Passed" << endl;
}
