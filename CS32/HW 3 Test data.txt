Homework 3 Test Data
For linear.cpp, there were 51 test cases, each worth 1 point; for tree.cpp, 11 cases, each worth 2 points; for maze.cpp, 4 test cases, each worth 3 points; and for landmark.cpp, 5 criteria, each worth 3 points. 

The landmark.cpp criteria were 

new Landmark("UCLA") must not compile ¡ª Landmark must be abstract. 
Landmark must not have a default constructor. 
Landmark must not have a constructor with more than one argument. 
Landmark must have a virtual destructor. 
No two function implementations may be the same. In particular, this prohibition forbade you from implementing both Hotel::color and Restaurant::color as { return "yellow"; }; they should have inherited that implementation from a common base class (probably Landmark). 
We concatenated linear.cpp, tree.cpp, maze.cpp, and this file to run the tests of those three files: 

#include <iostream>
#include <streambuf>
#include <string>
#include <algorithm>
#include <cstdlib>
#include <cassert>

using namespace std;

void testone(int n)
{
	static char maze1[10][10] = {
	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
	  { 'X', '.', 'X', '.', '.', 'X', '.', '.', '.', 'X' },
	  { 'X', '.', 'X', 'X', '.', 'X', '.', 'X', 'X', 'X' },
	  { 'X', '.', '.', '.', '.', 'X', '.', 'X', '.', 'X' },
	  { 'X', 'X', '.', 'X', '.', 'X', '.', '.', '.', 'X' },
	  { 'X', 'X', 'X', '.', '.', 'X', '.', 'X', '.', 'X' },
	  { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
	  { 'X', '.', 'X', 'X', '.', '.', 'X', '.', 'X', 'X' },
	  { 'X', '.', '.', '.', '.', 'X', '.', '.', '.', 'X' },
	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
	};
	
	static char maze2[10][10] = {
	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
	  { 'X', '.', 'X', '.', '.', 'X', '.', '.', '.', 'X' },
	  { 'X', '.', 'X', 'X', '.', 'X', '.', 'X', 'X', 'X' },
	  { 'X', '.', '.', '.', '.', 'X', '.', 'X', '.', 'X' },
	  { 'X', 'X', '.', 'X', '.', 'X', '.', '.', '.', 'X' },
	  { 'X', 'X', 'X', '.', 'X', 'X', '.', 'X', '.', 'X' },
	  { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
	  { 'X', '.', 'X', 'X', '.', '.', 'X', '.', 'X', 'X' },
	  { 'X', '.', '.', '.', '.', 'X', '.', '.', '.', 'X' },
	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
	};
	
	static char maze3[10][10] = {
	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
	  { 'X', 'X', '.', '.', '.', '.', '.', 'X', 'X', 'X' },
	  { 'X', '.', '.', 'X', 'X', '.', '.', '.', '.', 'X' },
	  { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
	  { 'X', '.', 'X', '.', 'X', 'X', 'X', '.', '.', 'X' },
	  { 'X', 'X', 'X', 'X', '.', '.', 'X', '.', '.', 'X' },
	  { 'X', 'X', '.', '.', '.', '.', 'X', '.', '.', 'X' },
	  { 'X', '.', '.', '.', '.', '.', '.', '.', 'X', 'X' },
	  { 'X', '.', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
	};
	
	static char maze4[10][10] = {
	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
	  { 'X', 'X', '.', '.', '.', '.', '.', 'X', 'X', 'X' },
	  { 'X', '.', '.', 'X', 'X', '.', '.', '.', '.', 'X' },
	  { 'X', '.', '.', '.', 'X', '.', '.', '.', 'X', 'X' },
	  { 'X', '.', 'X', '.', 'X', 'X', 'X', '.', '.', 'X' },
	  { 'X', 'X', 'X', 'X', '.', '.', 'X', '.', '.', 'X' },
	  { 'X', 'X', '.', '.', '.', '.', 'X', '.', '.', 'X' },
	  { 'X', '.', '.', '.', '.', '.', 'X', '.', 'X', 'X' },
	  { 'X', '.', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
	  { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
	};

	string a[10] = {
		"cow", "pig", "", "rat", "", "cat", "", "", "duck", "owl"
	};
	string x[10] = {
		"cow", "pig", "duck", "rat", "", "cat", "", "", "stag", "owl"
	};
	string y[10] = {
		"eel", "owl", "ant", "frog", "cat", "cow", "", "bat", "pig", "dog"
	};
	string b[4] = { "owl", "ant", "cat", "bat" };
	string c[8] = { "cat", "stag", "rat", "dog", "stag", "rat", "owl" };
	string d[12] = {
		"cat", "dog", "rat", "cat", "rat", "owl",
		"dog", "cat", "rat", "stag", "rat", "owl"
	};
	string e[12] = {
		"cat", "cat", "cat", "dog", "dog", "owl",
		"owl", "rat", "rat", "rat", "rat", "stag"
	};

	switch (n)
	{
	    			 default: {
		assert(false);
			} break; case  1: {
		assert(anyEmpty(a, 10));
			} break; case  2: {
		assert(anyEmpty(a, 8));
			} break; case  3: {
		assert(anyEmpty(a+2, 8));
			} break; case  4: {
		assert(!anyEmpty(a+8, 2));
			} break; case  5: {
		assert(anyEmpty(a+6, 2));
			} break; case  6: {
		assert(!anyEmpty(a, 1));
			} break; case  7: {
		assert(anyEmpty(a+2, 1));
			} break; case  8: {
		assert(!anyEmpty(a, 0)  &&  !anyEmpty(a+2, 0));
			} break; case  9: {
		assert(countEmpties(a, 10) == 4);
			} break; case 10: {
		assert(countEmpties(a, 8) == 4);
			} break; case 11: {
		assert(countEmpties(a+2, 8) == 4);
			} break; case 12: {
		assert(countEmpties(a+8, 2) == 0);
			} break; case 13: {
		assert(countEmpties(a+6, 2) == 2);
			} break; case 14: {
		assert(countEmpties(a, 1) == 0);
			} break; case 15: {
		assert(countEmpties(a+2, 1) == 1);
			} break; case 16: {
		assert(countEmpties(a, 0) == 0  &&  countEmpties(a+2, 0) == 0);
			} break; case 17: {
		assert(firstEmpty(a, 10) == 2);
			} break; case 18: {
		assert(firstEmpty(a, 8) == 2);
			} break; case 19: {
		assert(firstEmpty(a+2, 8) == 0);
			} break; case 20: {
		assert(firstEmpty(a+8, 2) == -1);
			} break; case 21: {
		assert(firstEmpty(a+6, 2) == 0);
			} break; case 22: {
		assert(firstEmpty(a, 1) == -1);
			} break; case 23: {
		assert(firstEmpty(a+2, 1) == 0);
			} break; case 24: {
		assert(firstEmpty(a, 0) == -1  &&  firstEmpty(a+2, 0) == -1);
			} break; case 25: {
		assert(indexOfLeast(x, 6) == 4);
			} break; case 26: {
		assert(indexOfLeast(x, 5) == 4);
			} break; case 27: {
		assert(indexOfLeast(x+7, 3) == 0);
			} break; case 28: {
		assert(indexOfLeast(x+8, 2) == 1);
			} break; case 29: {
		assert(indexOfLeast(x+2, 2) == 0);
			} break; case 30: {
		assert(indexOfLeast(x, 1) == 0);
			} break; case 31: {
		assert(indexOfLeast(x+4, 1) == 0);
			} break; case 32: {
		assert(indexOfLeast(x, 10) == 4);
			} break; case 33: {
		assert(indexOfLeast(x, 0) == -1  &&  indexOfLeast(x+2, 0) == -1);
			} break; case 34: {
		assert(includes(y, 10, b, 4));
			} break; case 35: {
		assert(includes(y+1, 9, b, 4));
			} break; case 36: {
		assert(!includes(y+2, 8, b, 4));
			} break; case 37: {
		assert(!includes(y+1, 6, b, 4));
			} break; case 38: {
		assert(includes(y+1, 7, b, 4));
			} break; case 39: {
		assert(includes(y, 10, b+2, 1));
			} break; case 40: {
		assert(includes(y+1, 9, b, 1));
			} break; case 41: {
		assert(!includes(y+2, 8, b, 1));
			} break; case 42: {
		assert(includes(y, 10, b, 0));
			} break; case 43: {
		assert(includes(y, 0, b, 0));
			} break; case 44: {
		assert(includes(y+1, 2, b, 2));
			} break; case 45: {
		assert(!includes(y+2, 2, b+1, 2));
			} break; case 46: {
		assert(!includes(y+2, 2, b+1, 3));
			} break; case 47: {
		assert(!includes(y+1, 1, b, 2));
			} break; case 48: {
		assert(!includes(y+1, 0, b, 1));

			} break; case 49: {
		assert(includes(c, 7, d+3, 3));
			} break; case 50: {
		assert(!includes(c, 7, d+6, 3));
			} break; case 51: {
		assert(includes(c, 7, d+9, 3));
			} break; case 52: {
		assert(countIncludes(c, 7, d, 3) == 1);
			} break; case 53: {
		assert(countIncludes(c, 7, d+3, 3) == 2);
			} break; case 54: {
		assert(countIncludes(c, 7, d+6, 3) == 0);
			} break; case 55: {
		assert(countIncludes(c, 7, d+9, 3) == 3);
			} break; case 56: {
		assert(countIncludes(c, 7, d+2, 1) == 2);
			} break; case 57: {
		assert(countIncludes(c, 2, d+2, 1) == 0);
			} break; case 58: {
		assert(countIncludes(c, 7, d, 0) == 1);
			} break; case 59: {
		assert(countIncludes(c, 0, d, 0) == 1);
			} break; case 60: {
		order(d, 12);
		assert(equal(d, d+12, e));
			} break; case 61: {
		order(d, 1);
		assert(d[0] == "cat");
			} break; case 62: {
		order(d, 0);
		assert(d[0] == "cat");
			} break; case 63: {
		assert(pathExists(maze1, 8, 6, 1, 1));
		break;
			} break; case 64: {
		assert(!pathExists(maze2, 8, 6, 1, 1));
		break;
			} break; case 65: {
		assert(pathExists(maze3, 4, 3, 7, 1));
		break;
			} break; case 66: {
		assert(!pathExists(maze4, 4, 3, 7, 1));
		break;
			}
	}
}

int main()
{
	cout << "Enter test number: ";
	int n;
	cin >> n;
	testone(n);
	cout << "Passed" << endl;
}
