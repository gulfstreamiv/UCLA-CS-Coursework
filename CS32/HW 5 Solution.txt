Homework 5 Solution

Problem 1 Problem 3 
Problem 2 Problem 4 

Problem 1:
                    50

        20                  60

  10          40                     70

           30     45             65       80

         25  35                         75
One possibility is 

                    50

        25                  60

  10          40                     70

           35     45             65       80

                                        75
Other possibilities have the left subtree of 50 being 

        10

              40

           35     45

         25
or 

        10

              40

           25     45

             35
  In-order: 10 20 25 30 35 40 45 50 60 65 70 75 80
 Pre-order: 50 20 10 40 30 25 35 45 60 70 65 80 75
Post-order: 10 25 35 30 45 40 20 65 75 80 70 60 50
Problem 2:
    7
 
 3     5

1 2   4
7 3 5 1 2 4
5 3 4 1 2

Problem 3:
struct Node
{
    int data;
    Node* left;
    Node* right;
    Node* parent;
};
void insertAuxiliary(Node*& n, int value, Node* par)
{
    if (n == NULL)
        set n to point to a new Node whose data field is set to value,
          whose left and right children are NULL, and whose parent field
          is set to par.
    else if (value < n->data)
        insertAuxiliary(n->left, value, n);
    else
        insertAuxiliary(n->right, value, n);
}

void insert(Node*& n, int value)
{
  insertAuxiliary(n, value, NULL);  // pass NULL as parent of root
}

Problem 4:
Adjacency matrix (entries shown as blank are 0; row is source, col is destination): 

   A B C D E F G H I
  +-----------------
A |  1 1
B |              1
C |      1 1
D |  1           1
E |            1
F |            1   1
G |    1         1
H |            1
I |    1
Adjacency list: 

A -> B C
B -> H
C -> D E
D -> B H
E -> G
F -> G I
G -> C H
H -> G
I -> C

E G C D B H
E G C D H B
E G H C D B
