3.59
int switch_prob(int x, int n)
{
    int result = x;

    switch (n) {
    case 42:
    case 40:
            result = x << 3;
            break;
    case 41:
            result += 17;
            break;
    case 43:
            result = x >> 3;
            break;
    case 45:
            result = x * x + 17;
            break;
    case 44:
            result = 49 * x * x;
            break;
    default:
            result += 17;
    }
    return result;
}

3.64
A. eax: result, ebx: s1.v, edx: s1.p
B. ebp-4: s1, ebp-8: s2, ebp-12: y, ebp-16: &x, ebp-20: s2
C. Push the members in the order from highest to lowest into the stack.
D. in the position of retaddr+4 £¬allocate a pointer pointing to the structure as the return address

3.67
union ele 
{
        struct {
                int *p;
                int x;
        } e1;

        struct {
                int y;
                union ele *next;
        } e2;
};

/*
* A. e1.p: 0, e1.x: 4, e2.y: 0, e2.next = 4
* B. 8 bytes
* C. codes are as follows:
*/
void proc(union ele *up)
{
        up->next->x = *(up->next->p) - up->y;
}

3.70
typedef struct ELE *tree_ptr;

struct ELE {
        tree_ptr left;
        tree_ptr right;
        long val;
};


long traverse(tree_ptr tp)
{
        if (!tp)
                return -1;

        long v = tp->val;
        long vleft = traverse(tp->left);
        long vright = traverse(tp->right);

        if (vright > vleft)
                vright = vleft;
        if (v > vright)
                v = vright;

        return v;
}